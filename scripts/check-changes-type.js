#!/usr/bin/env node

/**
 * Script para verificar o tipo de mudan√ßas commitadas
 * Determina se s√£o apenas mudan√ßas de documenta√ß√£o/configura√ß√£o
 * ou se incluem mudan√ßas de c√≥digo que requerem valida√ß√£o completa
 */

const { execSync } = require('child_process');
const path = require('path');

// Pastas que s√£o consideradas apenas documenta√ß√£o/configura√ß√£o
const DOCS_ONLY_PATHS = [
    'docs/',
    'memory-bank/',
    '.cursor/',
    '.cursorrules',
    '.clinerules'
];

/**
 * Verifica se um arquivo √© apenas documenta√ß√£o/configura√ß√£o
 */
function isDocsOnlyFile(filePath) {
    // Verifica se est√° em uma pasta de documenta√ß√£o
    const isInDocsPath = DOCS_ONLY_PATHS.some(docsPath =>
        filePath.startsWith(docsPath)
    );

    return isInDocsPath;
}

/**
 * Obt√©m lista de arquivos modificados no commit
 */
function getModifiedFiles() {
    try {
        // Verifica se h√° mudan√ßas staged
        const stagedFiles = execSync('git diff --cached --name-only', { encoding: 'utf8' })
            .trim()
            .split('\n')
            .filter(file => file.length > 0);

        // Verifica se h√° mudan√ßas n√£o staged
        const unstagedFiles = execSync('git diff --name-only', { encoding: 'utf8' })
            .trim()
            .split('\n')
            .filter(file => file.length > 0);

        return [...stagedFiles, ...unstagedFiles];
    } catch (error) {
        console.error('Erro ao obter arquivos modificados:', error.message);
        return [];
    }
}

/**
 * Verifica se todas as mudan√ßas s√£o apenas documenta√ß√£o
 */
function checkIfDocsOnly() {
    const modifiedFiles = getModifiedFiles();

    if (modifiedFiles.length === 0) {
        console.log('‚úÖ Nenhuma mudan√ßa detectada');
        return true;
    }

    console.log('üìÅ Arquivos modificados:');
    modifiedFiles.forEach(file => {
        const isDocs = isDocsOnlyFile(file);
        const status = isDocs ? 'üìÑ' : 'üíª';
        console.log(`  ${status} ${file}`);
    });

    // Verifica se todos os arquivos s√£o apenas documenta√ß√£o
    const allDocsOnly = modifiedFiles.every(file => isDocsOnlyFile(file));

    if (allDocsOnly) {
        console.log('\n‚úÖ Todas as mudan√ßas s√£o apenas documenta√ß√£o/configura√ß√£o');
        console.log('üöÄ Valida√ß√µes completas ser√£o puladas');
        return true;
    } else {
        console.log('\nüíª Mudan√ßas incluem c√≥digo fonte');
        console.log('üîç Valida√ß√µes completas ser√£o executadas');
        return false;
    }
}

/**
 * Executa verifica√ß√µes essenciais mesmo para docs-only
 */
function runEssentialChecks() {
    console.log('\nüîç Executando verifica√ß√µes essenciais...');

    try {
        // 1. Verificar se h√° algo para commitar
        const status = execSync('git status --porcelain', { encoding: 'utf8' });
        if (status.trim().length === 0) {
            console.log('‚ö†Ô∏è  Nenhuma mudan√ßa para commitar');
            return false;
        }

        // 2. Verificar regras de commit (se houver commit)
        if (process.argv.includes('--check-commit')) {
            console.log('üìù Verificando regras de commit...');
            // Aqui voc√™ pode adicionar verifica√ß√µes espec√≠ficas de commit
        }

        // 3. Verificar se n√£o h√° arquivos grandes
        console.log('üìè Verificando tamanho dos arquivos...');
        const largeFiles = execSync('find . -type f -size +10M -not -path "./node_modules/*" -not -path "./.git/*"', { encoding: 'utf8' });
        if (largeFiles.trim().length > 0) {
            console.log('‚ö†Ô∏è  Arquivos grandes detectados:', largeFiles.trim());
        }

        console.log('‚úÖ Verifica√ß√µes essenciais conclu√≠das');
        return true;

    } catch (error) {
        console.error('‚ùå Erro nas verifica√ß√µes essenciais:', error.message);
        return false;
    }
}

/**
 * Fun√ß√£o principal
 */
function main() {
    console.log('üîç Verificando tipo de mudan√ßas...\n');

    const isDocsOnly = checkIfDocsOnly();

    if (isDocsOnly) {
        console.log('\nüìÑ Modo: Documenta√ß√£o apenas');
        const essentialChecksPassed = runEssentialChecks();

        if (essentialChecksPassed) {
            console.log('\n‚úÖ Pronto para commit de documenta√ß√£o');
            process.exit(0);
        } else {
            console.log('\n‚ùå Verifica√ß√µes essenciais falharam');
            process.exit(1);
        }
    } else {
        console.log('\nüíª Modo: Valida√ß√£o completa necess√°ria');
        process.exit(2); // C√≥digo especial para indicar que valida√ß√£o completa √© necess√°ria
    }
}

// Executar se chamado diretamente
if (require.main === module) {
    main();
}

module.exports = {
    checkIfDocsOnly,
    runEssentialChecks,
    isDocsOnlyFile
};
