---
# Maintenance Workflows - ControlFin
# Consolidates: stale.yml

name: Maintenance

on:
  schedule:
    - cron: '0 0 * * 0' # Weekly maintenance
  workflow_dispatch: # Allow manual trigger

jobs:
  # Load centralized configuration
  load-config:
    runs-on: ubuntu-latest
    outputs:
      config: ${{ steps.read-config.outputs.config }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read CI Config
        id: read-config
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const yaml = require('js-yaml');
            const configPath = '.github/config/ci-config.yml';
            const config = yaml.load(fs.readFileSync(configPath, 'utf8'));
            core.setOutput('config', JSON.stringify(config));

  # Close Stale Issues
  close-stale-issues:
    needs: load-config
    name: Close Stale Issues
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Close Stale Issues
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            const staleDays = 30;
            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - staleDays);

            // Get stale issues
            const { data: issues } = await github.rest.issues.listForRepo({
              owner,
              repo,
              state: 'open',
              sort: 'updated',
              direction: 'asc'
            });

            for (const issue of issues) {
              if (new Date(issue.updated_at) < cutoffDate) {
                await github.rest.issues.update({
                  owner,
                  repo,
                  issue_number: issue.number,
                  state: 'closed',
                  state_reason: 'not_planned'
                });

                await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number: issue.number,
                  body: `This issue has been automatically closed due to inactivity (${staleDays} days). Please reopen if still relevant.`
                });
              }
            }

  # Close Stale Pull Requests
  close-stale-prs:
    needs: load-config
    name: Close Stale Pull Requests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Close Stale Pull Requests
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            const staleDays = 14; // PRs get stale faster than issues
            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - staleDays);

            // Get stale pull requests
            const { data: prs } = await github.rest.pulls.list({
              owner,
              repo,
              state: 'open',
              sort: 'updated',
              direction: 'asc'
            });

            for (const pr of prs) {
              if (new Date(pr.updated_at) < cutoffDate) {
                await github.rest.pulls.update({
                  owner,
                  repo,
                  pull_number: pr.number,
                  state: 'closed'
                });

                await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number: pr.number,
                  body: `This pull request has been automatically closed due to inactivity (${staleDays} days). Please reopen if still relevant.`
                });
              }
            }

  # Cleanup Old Artifacts
  cleanup-artifacts:
    needs: load-config
    name: Cleanup Old Artifacts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cleanup Old Artifacts
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - 30); // Keep artifacts for 30 days

            // Get all artifacts
            const { data: artifacts } = await github.rest.actions.listArtifactsForRepo({
              owner,
              repo
            });

            for (const artifact of artifacts) {
              if (new Date(artifact.created_at) < cutoffDate) {
                await github.rest.actions.deleteArtifact({
                  owner,
                  repo,
                  artifact_id: artifact.id
                });
                console.log(`Deleted artifact: ${artifact.name}`);
              }
            }

  # Update Dependencies
  update-dependencies:
    needs: load-config
    name: Update Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ fromJson(needs.load-config.outputs.config).node_versions.primary }}
          cache: 'npm'

      - name: Check for outdated dependencies
        run: |
          echo "Checking for outdated dependencies..."
          cd controlfin-frontend && npm outdated || true
          cd ../controlfin-backend && npm outdated || true

      - name: Security audit
        run: |
          echo "Running security audit..."
          cd controlfin-frontend && npm audit --audit-level=moderate || true
          cd ../controlfin-backend && npm audit --audit-level=moderate || true

  # Repository Health Check
  health-check:
    needs: load-config
    name: Repository Health Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Repository Health Check
        run: |
          echo "Performing repository health check..."

          # Check for large files
          echo "Checking for large files..."
          find . -type f -size +50M -not -path "./node_modules/*" -not -path "./.git/*" | while read file; do
            echo "Warning: Large file found: $file"
          done

          # Check for sensitive files
          echo "Checking for sensitive files..."
          find . -name "*.env" -o -name "*.key" -o -name "*.pem" -o -name "*.p12" | while read file; do
            echo "Warning: Sensitive file found: $file"
          done

          # Check for TODO/FIXME comments
          echo "Checking for TODO/FIXME comments..."
          find . -name "*.ts" -o -name "*.tsx" -o -name "*.js" -o -name "*.jsx" | while read file; do
            if grep -q "TODO\|FIXME\|XXX" "$file"; then
              echo "Info: $file contains TODO/FIXME/XXX"
            fi
          done

          echo "Repository health check complete"
