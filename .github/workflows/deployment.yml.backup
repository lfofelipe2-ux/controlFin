---
# Deployment Workflows - ControlFin
# Consolidates: cd.yml, release.yml

name: Deployment

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [closed]

jobs:
  # Load centralized configuration
  load-config:
    runs-on: ubuntu-latest
    outputs:
      config: ${{ steps.read-config.outputs.config }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read CI Config
        id: read-config
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const yaml = require('js-yaml');
            const configPath = '.github/config/ci-config.yml';
            const config = yaml.load(fs.readFileSync(configPath, 'utf8'));
            core.setOutput('config', JSON.stringify(config));

  # Build and Test
  build-and-test:
    needs: load-config
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Project
        uses: ./.github/actions/setup-project
        with:
          project: 'frontend'
          node-version: ${{ fromJson(needs.load-config.outputs.config).node_versions.primary }}

      - name: Setup Project
        uses: ./.github/actions/setup-project
        with:
          project: 'backend'
          node-version: ${{ fromJson(needs.load-config.outputs.config).node_versions.primary }}

      - name: Run Tests
        uses: ./.github/actions/run-tests
        with:
          project: 'frontend'
          test-command: ${{ fromJson(needs.load-config.outputs.config).projects.frontend.test_command }}

      - name: Run Tests
        uses: ./.github/actions/run-tests
        with:
          project: 'backend'
          test-command: ${{ fromJson(needs.load-config.outputs.config).projects.backend.test_command }}

      - name: Build Applications
        uses: ./.github/actions/run-build
        with:
          project: 'frontend'
          build-command: ${{ fromJson(needs.load-config.outputs.config).projects.frontend.build_command }}

      - name: Build Applications
        uses: ./.github/actions/run-build
        with:
          project: 'backend'
          build-command: ${{ fromJson(needs.load-config.outputs.config).projects.backend.build_command }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            controlfin-frontend/dist/
            controlfin-backend/dist/
          retention-days: 30

  # Deploy to Staging
  deploy-staging:
    if: github.ref == 'refs/heads/develop'
    needs: [load-config, build-and-test]
    name: Deploy to Staging
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: ./artifacts/

      - name: Deploy to Staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          echo "Staging deployment complete"

  # Deploy to Production
  deploy-production:
    if: github.ref == 'refs/heads/main'
    needs: [load-config, build-and-test]
    name: Deploy to Production
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: ./artifacts/

      - name: Deploy to Production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          echo "Production deployment complete"

  # Create Release
  create-release:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [load-config, build-and-test]
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: ./artifacts/

      - name: Generate Release Notes
        id: release-notes
        run: |
          # Generate release notes from recent commits
          echo "## What's Changed" > release-notes.md
          git log --oneline --since="$(git describe --tags --abbrev=0 2>/dev/null || echo 'HEAD~10')" >> release-notes.md
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          cat release-notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: ${{ steps.release-notes.outputs.release_notes }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ./artifacts/
          asset_name: build-artifacts-v${{ github.run_number }}.zip
          asset_content_type: application/zip

  # Health Check
  health-check:
    if: github.ref == 'refs/heads/main'
    needs: [deploy-production]
    name: Health Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Health Check
        run: |
          echo "Performing health check..."
          # Add your health check commands here
          # Example: curl -f https://your-app.com/health
          echo "Health check complete"
