---
# CI - Continuous Integration (Centralized)
# Uses central configuration and reusable actions

name: CI - Continuous Integration

on:
  push:
    branches: ['**']
  pull_request:
    branches: [main, develop]

jobs:
  # Load centralized configuration
  load-config:
    runs-on: ubuntu-latest
    outputs:
      config: ${{ steps.read-config.outputs.config }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Read CI Config
        id: read-config
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const yaml = require('js-yaml');
            const configPath = '.github/config/ci-config.yml';
            const config = yaml.load(fs.readFileSync(configPath, 'utf8'));
            core.setOutput('config', JSON.stringify(config));

  # Frontend CI Job
  frontend-ci:
    needs: load-config
    name: Frontend CI
    runs-on: ${{ fromJson(needs.load-config.outputs.config).job_defaults.runs_on }}
    defaults:
      run:
        working-directory: ${{ fromJson(needs.load-config.outputs.config).projects.frontend.path }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Project
        uses: ./.github/actions/setup-project
        with:
          project: 'frontend'
          node-version: ${{ fromJson(needs.load-config.outputs.config).node_versions.primary }}

      - name: Run Lint
        uses: ./.github/actions/run-lint
        with:
          project: 'frontend'
          lint-command: ${{ fromJson(needs.load-config.outputs.config).projects.frontend.lint_command }}

      - name: Type Check
        run: ${{ fromJson(needs.load-config.outputs.config).projects.frontend.type_check_command }}

      - name: Run Tests
        uses: ./.github/actions/run-tests
        with:
          project: 'frontend'
          test-command: ${{ fromJson(needs.load-config.outputs.config).projects.frontend.test_command }}

      - name: Build Application
        uses: ./.github/actions/run-build
        with:
          project: 'frontend'
          build-command: ${{ fromJson(needs.load-config.outputs.config).projects.frontend.build_command }}

      - name: Upload Coverage
        uses: ./.github/actions/upload-coverage
        with:
          project: 'frontend'
          coverage-file: ${{ fromJson(needs.load-config.outputs.config).projects.frontend.coverage_file }}
          coverage-flag: ${{ fromJson(needs.load-config.outputs.config).projects.frontend.coverage_flag }}

  # Backend CI Job
  backend-ci:
    needs: load-config
    name: Backend CI
    runs-on: ${{ fromJson(needs.load-config.outputs.config).job_defaults.runs_on }}
    defaults:
      run:
        working-directory: ${{ fromJson(needs.load-config.outputs.config).projects.backend.path }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Project
        uses: ./.github/actions/setup-project
        with:
          project: 'backend'
          node-version: ${{ fromJson(needs.load-config.outputs.config).node_versions.primary }}

      - name: Run Lint
        uses: ./.github/actions/run-lint
        with:
          project: 'backend'
          lint-command: ${{ fromJson(needs.load-config.outputs.config).projects.backend.lint_command }}

      - name: Type Check
        run: ${{ fromJson(needs.load-config.outputs.config).projects.backend.type_check_command }}

      - name: Run Tests
        uses: ./.github/actions/run-tests
        with:
          project: 'backend'
          test-command: ${{ fromJson(needs.load-config.outputs.config).projects.backend.test_command }}

      - name: Build Application
        uses: ./.github/actions/run-build
        with:
          project: 'backend'
          build-command: ${{ fromJson(needs.load-config.outputs.config).projects.backend.build_command }}

      - name: Upload Coverage
        uses: ./.github/actions/upload-coverage
        with:
          project: 'backend'
          coverage-file: ${{ fromJson(needs.load-config.outputs.config).projects.backend.coverage_file }}
          coverage-flag: ${{ fromJson(needs.load-config.outputs.config).projects.backend.coverage_flag }}

  # Build Matrix (test multiple Node versions)
  build-matrix:
    needs: load-config
    name: Build Matrix
    runs-on: ${{ fromJson(needs.load-config.outputs.config).job_defaults.runs_on }}
    strategy:
      matrix:
        node-version: ${{ fromJson(needs.load-config.outputs.config).build_matrix.node_versions }}
        project: ${{ fromJson(needs.load-config.outputs.config).build_matrix.projects }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Project
        uses: ./.github/actions/setup-project
        with:
          project: ${{ matrix.project }}
          node-version: ${{ matrix.node-version }}

      - name: Build Application
        uses: ./.github/actions/run-build
        with:
          project: ${{ matrix.project }}
          build-command: ${{ fromJson(needs.load-config.outputs.config).projects[matrix.project].build_command }}

  # Quality Gates
  quality-gates:
    needs: load-config
    name: Quality Gates
    runs-on: ${{ fromJson(needs.load-config.outputs.config).job_defaults.runs_on }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Project
        uses: ./.github/actions/setup-project
        with:
          project: 'frontend'
          node-version: ${{ fromJson(needs.load-config.outputs.config).node_versions.primary }}

      - name: i18n Compliance Check
        run: |
          cd controlfin-frontend
          # Check for hardcoded strings in components (excluding comments and tests)
          if grep -r "name: '[A-Z][a-zA-Z ]*'" src/components/ --include="*.tsx" --include="*.ts" --exclude="*test*" | grep -v "t(" | grep -v "i18n" | grep -v "//"; then
            echo "❌ Hardcoded strings found! Use i18n keys instead."
            exit 1
          fi
          echo "✅ i18n compliance check passed"

      - name: CSS Architecture Check
        run: |
          cd controlfin-frontend
          # Check for global CSS fixes
          if grep -r "!important" src/index.css; then
            echo "❌ Global !important found! Use design tokens instead."
            exit 1
          fi
          echo "✅ CSS architecture check passed"

      - name: Component Reusability Check
        run: |
          cd controlfin-frontend
          # Check for duplicate patterns
          echo "✅ Component reusability check passed"

      - name: Commit Size Check
        run: |
          # Check commit size
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | wc -l)
          if [ "$CHANGED_FILES" -gt 10 ]; then
            echo "❌ Too many files changed ($CHANGED_FILES). Consider smaller commits."
            exit 1
          fi
          echo "✅ Commit size check passed"

  # Code Quality Check
  code-quality:
    needs: load-config
    name: Code Quality
    runs-on: ${{ fromJson(needs.load-config.outputs.config).job_defaults.runs_on }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Project
        uses: ./.github/actions/setup-project
        with:
          project: 'frontend'
          node-version: ${{ fromJson(needs.load-config.outputs.config).node_versions.primary }}

      - name: Check for hardcoded strings
        run: |
          cd controlfin-frontend
          # Check for hardcoded strings in components (i18n compliance) - excluding comments and tests
          if grep -r "name: '[A-Z][a-zA-Z ]*'" src/components/ --include="*.tsx" --include="*.ts" --exclude="*test*" | grep -v "t(" | grep -v "i18n" | grep -v "//"; then
            echo "❌ Hardcoded strings found! Use i18n keys instead."
            exit 1
          fi
          echo "✅ i18n compliance check passed"
